// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'db.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Tbl_alarm.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Tbl_alarm TABLE
class TableTbl_alarm extends SqfEntityTableBase {
  TableTbl_alarm() {
    // declare properties of EntityTable
    tableName = 'tbl_alarm';
    primaryKeyName = 'ROWID';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('TIME', DbType.text),
      SqfEntityFieldBase('DAY', DbType.text),
      SqfEntityFieldBase('STATUS', DbType.bool),
      SqfEntityFieldBase('DESC', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbl_alarm();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class DbModel extends SqfEntityModelProvider {
  DbModel() {
    databaseName = dbModel.databaseName;
    password = dbModel.password;
    dbVersion = dbModel.dbVersion;
    preSaveAction = dbModel.preSaveAction;
    logFunction = dbModel.logFunction;
    databaseTables = [
      TableTbl_alarm.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = dbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = dbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Tbl_alarm
class Tbl_alarm extends TableBase {
  Tbl_alarm({this.ROWID, this.TIME, this.DAY, this.STATUS, this.DESC}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Tbl_alarm.withFields(this.TIME, this.DAY, this.STATUS, this.DESC) {
    _setDefaultValues();
  }
  Tbl_alarm.withId(this.ROWID, this.TIME, this.DAY, this.STATUS, this.DESC) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Tbl_alarm.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    ROWID = int.tryParse(o['ROWID'].toString());
    if (o['TIME'] != null) {
      TIME = o['TIME'].toString();
    }
    if (o['DAY'] != null) {
      DAY = o['DAY'].toString();
    }
    if (o['STATUS'] != null) {
      STATUS =
          o['STATUS'].toString() == '1' || o['STATUS'].toString() == 'true';
    }
    if (o['DESC'] != null) {
      DESC = o['DESC'].toString();
    }
  }
  // FIELDS (Tbl_alarm)
  int? ROWID;
  String? TIME;
  String? DAY;
  bool? STATUS;
  String? DESC;

  // end FIELDS (Tbl_alarm)

  static const bool _softDeleteActivated = false;
  Tbl_alarmManager? __mnTbl_alarm;

  Tbl_alarmManager get _mnTbl_alarm {
    return __mnTbl_alarm = __mnTbl_alarm ?? Tbl_alarmManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['ROWID'] = ROWID;
    if (TIME != null || !forView) {
      map['TIME'] = TIME;
    }
    if (DAY != null || !forView) {
      map['DAY'] = DAY;
    }
    if (STATUS != null) {
      map['STATUS'] = forQuery ? (STATUS! ? 1 : 0) : STATUS;
    } else if (STATUS != null || !forView) {
      map['STATUS'] = null;
    }
    if (DESC != null || !forView) {
      map['DESC'] = DESC;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['ROWID'] = ROWID;
    if (TIME != null || !forView) {
      map['TIME'] = TIME;
    }
    if (DAY != null || !forView) {
      map['DAY'] = DAY;
    }
    if (STATUS != null) {
      map['STATUS'] = forQuery ? (STATUS! ? 1 : 0) : STATUS;
    } else if (STATUS != null || !forView) {
      map['STATUS'] = null;
    }
    if (DESC != null || !forView) {
      map['DESC'] = DESC;
    }

    return map;
  }

  /// This method returns Json String [Tbl_alarm]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbl_alarm]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [TIME, DAY, STATUS, DESC];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [ROWID, TIME, DAY, STATUS, DESC];
  }

  static Future<List<Tbl_alarm>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tbl_alarm.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Tbl_alarm>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbl_alarm>[];
    try {
      objList = list
          .map((tbl_alarm) =>
              Tbl_alarm.fromMap(tbl_alarm as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tbl_alarm.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbl_alarm>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbl_alarm> objList = <Tbl_alarm>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbl_alarm.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbl_alarm by ID if exist, otherwise returns null
  /// Primary Keys: int? ROWID
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Tbl_alarm] if exist, otherwise returns null
  Future<Tbl_alarm?> getById(int? ROWID,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (ROWID == null) {
      return null;
    }
    Tbl_alarm? obj;
    final data = await _mnTbl_alarm.getById([ROWID]);
    if (data.length != 0) {
      obj = Tbl_alarm.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbl_alarm) object. If the ROWID field is null, saves as a new record and returns new ROWID, if ROWID is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns ROWID
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (ROWID == null || ROWID == 0) {
      ROWID = await _mnTbl_alarm.insert(this, ignoreBatch);
    } else {
      await _mnTbl_alarm.update(this);
    }

    return ROWID;
  }

  /// Saves the (Tbl_alarm) object. If the ROWID field is null, saves as a new record and returns new ROWID, if ROWID is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns ROWID
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (ROWID == null || ROWID == 0) {
      ROWID = await _mnTbl_alarm.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // ROWID= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbl_alarm.updateOrThrow(this);
    }

    return ROWID;
  }

  /// saveAs Tbl_alarm. Returns a new Primary Key value of Tbl_alarm

  /// <returns>Returns a new Primary Key value of Tbl_alarm
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    ROWID = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Tbl_alarm> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tbl_alarm> tbl_alarms,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await DbModel().batchStart();
    for (final obj in tbl_alarms) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await DbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < tbl_alarms.length; i++) {
        if (tbl_alarms[i].ROWID == null) {
          tbl_alarms[i].ROWID = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns ROWID
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTbl_alarm.rawInsert(
          'INSERT OR REPLACE INTO tbl_alarm (ROWID, TIME, DAY, STATUS, DESC)  VALUES (?,?,?,?,?)',
          [ROWID, TIME, DAY, STATUS, DESC],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Tbl_alarm ROWID=$ROWID updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Tbl_alarm ROWID=$ROWID did not update');
      }
      return ROWID;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tbl_alarm Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Tbl_alarm>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Tbl_alarm> tbl_alarms,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTbl_alarm.rawInsertAll(
        'INSERT OR REPLACE INTO tbl_alarm (ROWID, TIME, DAY, STATUS, DESC)  VALUES (?,?,?,?,?)',
        tbl_alarms,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Tbl_alarm

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Tbl_alarm invoked (ROWID=$ROWID)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnTbl_alarm
          .delete(QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]));
    } else {
      return _mnTbl_alarm.updateBatch(
          QueryParams(whereString: 'ROWID=?', whereArguments: [ROWID]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Tbl_alarm] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  Tbl_alarmFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Tbl_alarmFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  Tbl_alarmFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return Tbl_alarmFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      ROWID = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tbl_alarm

// region Tbl_alarmField
class Tbl_alarmField extends FilterBase {
  Tbl_alarmField(Tbl_alarmFilterBuilder tbl_alarmFB) : super(tbl_alarmFB);

  @override
  Tbl_alarmFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder isNull() {
    return super.isNull() as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as Tbl_alarmFilterBuilder;
  }

  @override
  Tbl_alarmField get not {
    return super.not as Tbl_alarmField;
  }
}
// endregion Tbl_alarmField

// region Tbl_alarmFilterBuilder
class Tbl_alarmFilterBuilder extends ConjunctionBase {
  Tbl_alarmFilterBuilder(Tbl_alarm obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnTbl_alarm = obj._mnTbl_alarm;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  Tbl_alarmManager? _mnTbl_alarm;

  /// put the sql keyword 'AND'
  @override
  Tbl_alarmFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  Tbl_alarmFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  Tbl_alarmFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  Tbl_alarmFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  Tbl_alarmFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  Tbl_alarmFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  Tbl_alarmFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Tbl_alarmFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Tbl_alarmFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  Tbl_alarmFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  Tbl_alarmFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  Tbl_alarmField _setField(
      Tbl_alarmField? field, String colName, DbType dbtype) {
    return Tbl_alarmField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  Tbl_alarmField? _ROWID;
  Tbl_alarmField get ROWID {
    return _ROWID = _setField(_ROWID, 'ROWID', DbType.integer);
  }

  Tbl_alarmField? _TIME;
  Tbl_alarmField get TIME {
    return _TIME = _setField(_TIME, 'TIME', DbType.text);
  }

  Tbl_alarmField? _DAY;
  Tbl_alarmField get DAY {
    return _DAY = _setField(_DAY, 'DAY', DbType.text);
  }

  Tbl_alarmField? _STATUS;
  Tbl_alarmField get STATUS {
    return _STATUS = _setField(_STATUS, 'STATUS', DbType.bool);
  }

  Tbl_alarmField? _DESC;
  Tbl_alarmField get DESC {
    return _DESC = _setField(_DESC, 'DESC', DbType.text);
  }

  /// Deletes List<Tbl_alarm> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTbl_alarm!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTbl_alarm!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'ROWID IN (SELECT ROWID from tbl_alarm ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTbl_alarm!.updateBatch(qparams, values);
  }

  /// This method always returns [Tbl_alarm] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tbl_alarm?
  @override
  Future<Tbl_alarm?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTbl_alarm!.toList(qparams);
    final data = await objFuture;
    Tbl_alarm? obj;
    if (data.isNotEmpty) {
      obj = Tbl_alarm.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Tbl_alarm]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tbl_alarm?
  @override
  Future<Tbl_alarm> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Tbl_alarm();
  }

  /// This method returns int. [Tbl_alarm]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tbl_alarmCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbl_alarmsFuture = await _mnTbl_alarm!.toList(qparams);
    final int count = tbl_alarmsFuture[0]['CNT'] as int;
    if (tbl_alarmCount != null) {
      tbl_alarmCount(count);
    }
    return count;
  }

  /// This method returns List<Tbl_alarm> [Tbl_alarm]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Tbl_alarm>
  @override
  Future<List<Tbl_alarm>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Tbl_alarm> tbl_alarmsData = await Tbl_alarm.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tbl_alarmsData;
  }

  /// This method returns Json String [Tbl_alarm]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbl_alarm]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbl_alarm]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTbl_alarm!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbl_alarm]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `ROWID` FROM tbl_alarm WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> ROWIDData = <int>[];
    qparams.selectColumns = ['ROWID'];
    final ROWIDFuture = await _mnTbl_alarm!.toList(qparams);

    final int count = ROWIDFuture.length;
    for (int i = 0; i < count; i++) {
      ROWIDData.add(ROWIDFuture[i]['ROWID'] as int);
    }
    return ROWIDData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbl_alarm]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTbl_alarm!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Tbl_alarm.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTbl_alarm!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion Tbl_alarmFilterBuilder

// region Tbl_alarmFields
class Tbl_alarmFields {
  static TableField? _fROWID;
  static TableField get ROWID {
    return _fROWID =
        _fROWID ?? SqlSyntax.setField(_fROWID, 'rowid', DbType.integer);
  }

  static TableField? _fTIME;
  static TableField get TIME {
    return _fTIME = _fTIME ?? SqlSyntax.setField(_fTIME, 'TIME', DbType.text);
  }

  static TableField? _fDAY;
  static TableField get DAY {
    return _fDAY = _fDAY ?? SqlSyntax.setField(_fDAY, 'DAY', DbType.text);
  }

  static TableField? _fSTATUS;
  static TableField get STATUS {
    return _fSTATUS =
        _fSTATUS ?? SqlSyntax.setField(_fSTATUS, 'STATUS', DbType.bool);
  }

  static TableField? _fDESC;
  static TableField get DESC {
    return _fDESC = _fDESC ?? SqlSyntax.setField(_fDESC, 'DESC', DbType.text);
  }
}
// endregion Tbl_alarmFields

//region Tbl_alarmManager
class Tbl_alarmManager extends SqfEntityProvider {
  Tbl_alarmManager()
      : super(DbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'tbl_alarm';
  static const List<String> _primaryKeyList = ['ROWID'];
  static const String _whereStr = 'ROWID=?';
}

//endregion Tbl_alarmManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await DbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class DbModelSequenceManager extends SqfEntityProvider {
  DbModelSequenceManager() : super(DbModel());
}
// END OF ENTITIES
